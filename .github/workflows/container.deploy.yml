name: Container Build and Deploy

on:
  push:
    branches: main

env:
  AZURE_APP_NAME: proconex-python
  IMAGE_NAME: proconex-python:latest
  RESOURCE_GROUP: fathym-proconex-production
  CONTAINERAPPS_ENVIRONMENT: fpp-container-apps
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_REGISTRY }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build the Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
          file: DOCKERFILE
          context: .
          load: false

      - name: Deploy to Azure Container App
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            # Allow dynamic installation of the containerapp extension
            az config set extension.use_dynamic_install=yes_without_prompt
            
            # Install the containerapp extension
            az extension add --name containerapp

            # Check if the container app exists
            if az containerapp show --name ${{ env.AZURE_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --only-show-errors; then
              # Update the container app if it exists
              az containerapp update \
                --name ${{ env.AZURE_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --image ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }} \
                --registry-server ${{ env.ACR_REGISTRY }} \
                --registry-username ${{ env.ACR_USERNAME }} \
                --registry-password ${{ env.ACR_PASSWORD }} \
                --cpu 0.5 --memory 1.0Gi
            else
              # Create the container app if it doesn't exist
              az containerapp create \
                --name ${{ env.AZURE_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINERAPPS_ENVIRONMENT }} \
                --image ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }} \
                --registry-server ${{ env.ACR_REGISTRY }} \
                --registry-username ${{ env.ACR_USERNAME }} \
                --registry-password ${{ env.ACR_PASSWORD }} \
                --cpu 0.5 --memory 1.0Gi
            fi
  